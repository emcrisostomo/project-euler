#include <iostream>
#include "../number.h"

// Pentagonal numbers are generated by the formula, Pn=n(3n−1)/2.  The first ten
// pentagonal numbers are:
//
//   1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...
//
// It can be seen that P_4 + P_7 = 22 + 70 = 92 = P_8.  However, their
// difference, 70 − 22 = 48, is not pentagonal.
//
// Find the pair of pentagonal numbers, Pj and Pk, for which their sum and
// difference are pentagonal and D = |Pk − Pj| is minimised; what is the value
// of D?
//
int main(int argc, char *argv[])
{
  std::vector<unsigned long> pentagonal_numbers;
  pentagonal_numbers.push_back(1);

  unsigned int n = 1;
  unsigned long previous = 1;

  while (true)
  {
    previous += (3 * n + 1);
    ++n;
    pentagonal_numbers.push_back(previous);

    for (const auto& p : pentagonal_numbers)
    {
      auto sum = previous - p;
      auto diff = (sum > p ? sum - p : p - sum);

      if (number::is_pentagonal(sum) && number::is_pentagonal(diff))
      {
        std::cout << diff << "\n";
        return 0;
      }
    }
  }
}

